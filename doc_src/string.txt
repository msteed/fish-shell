\section string string - manipulate strings

\subsection string-synopsis Synopsis
\fish{synopsis}
string length [(-q | --quiet)] [--] [STRING...]
string sub [(-s | --start)] [(-l | --length)] [(-q | --quiet)] [STRING...]
string split [(-m | --max) MAX] [(-r | --right)] [(-q | --quiet)] [--]
             SEP [STRING...]
string join [(-q | --quiet)] [--] SEP [STRING...]
string trim [(-l | --left)] [(-r | --right)] [(-c | --chars CHARS)]
            [(-q | --quiet)] [--] [STRING...]
string escape [(-n | --no-quoted)] [--] [STRING...]
string match [(-a | --all)] [(-i | --ignore-case)] [(-r | --regex)]
             [(-n | --index)] [(-q | --quiet)] [--] PATTERN [STRING...]
string replace [(-a | --all)] [(-i | --ignore-case)] [(-r | --regex)]
               [(-q | --quiet)] [--] PATTERN REPLACEMENT [STRING...]
\endfish


\subsection string-description Description

`string` performs operations on strings.

STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input. It is an error to supply STRING arguments on the command line and on standard input.

Arguments beginning with `-` are normally interpreted as switches; `--` causes the following arguments not to be treated as switches even if they begin with `-`. Switches and required arguments are recognized only on the command line.

Most subcommands accept a `-q` or `--quiet` switch, which suppresses the usual output but exits with the documented status.

TBD: Currently, multiple outputs are separated by newlines. Should IFS be used instead?

TBD: Magic behavior when used in command substitution: no IFS splitting.

The following subcommands are available:

- `length` reports the length of each string argument in characters. Exit status: 0 if at least one non-empty STRING was given, or 1 otherwise.

- `sub` prints a substring of each string argument. The start of the substring can be specified with `-s` or `--start` followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with `-l` or `--length`. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.

- `split` splits each STRING on the separator SEP. If `-m` or `--max` is specified, at most MAX splits are done. If `-r` or `--right` is given, splitting is performed right-to-left. This is useful in combination with `-m` or `--max`. Exit status: 0 if at least one split was performed, or 1 otherwise.

- `join` joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.

- `trim` removes leading and trailing whitespace from each STRING. If `-l` or `--left` is given, only leading whitespace is removed. If `-r` or `--right` is given, only trailing whitespace is trimmed. The `-c` or `--chars` switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.

- `escape` escapes each STRING such that it can be passed back to `eval` to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If `-q` or `--no-quote` is given, the simplifying quoted format is not used. If `-t` or `--no-tilde` is given, the tilde character (~) is not escaped. Exit status: 0 if at least one string was escaped, or 1 otherwise.

- `match` tests each STRING against a pattern and prints matching substrings. Only the first match is printed unless `-a` or `--all` is given, in which case all matches are reported. Matching can be made case-insensitive with `-i` or `--ignore-case`. If `-n` or `--index` is given, each match is reported as a 1-based start position, or 0 for no match. By default, PATTERN is interpreted as a glob pattern matched against each entire string argument. If `-r` or `--regex` is given, PATTERN is interpreted as a Perl-compatible regular expression. Note that for a regular expressions containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. Exit status: 0 if at least one match was found, or 1 otherwise.

- `replace` is similar to `match` but replaces matching non-overlapping substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched by the literal string REPLACEMENT. If `-r` or `--regex` is given, PATTERN is interpreted as a Perl-compatible regular expression, and REPLACEMENT can refer to capturing groups by number or name as `$n` or `${n}`. Exit status: 0 if at least one replacement was performed, or 1 otherwise.


\subsection string-example Examples

\fish
string length 'hello, world'
# Output:
# 12

string length -q $str
# Equivalent to test -n $str
\endfish

\fish
string sub --length 2 abcde
# Output:
# ab

string sub -s 2 -l 2 abcde
# Output:
# bc

string sub --start -2 abcde
# Output:
# de
\endfish

\fish
string split . example.com
# Output:
# example
# com

string split -r -m1 / /usr/local/bin/fish
# Output:
# /usr/local/bin
# fish
\endfish

\fish
seq 3 | string join ...
# Output:
# 1...2...3
\endfish

\fish
string trim ' abc d '
# Output:
# abc d

string trim -r -c yz xyzzy zany
# Output:
# x
# zan
\endfish

\fish
echo \x07 | string escape
# Output:
# \cg
\endfish

\fish
# glob examples

string match '?' a
# Output:
# a

string match 'a*b' axxb
# Output:
# axxb

string match -i 'a??B' Axxb
# Output:
# Axxb

string match -a -i '[aeiou]' A B C D E
# Output:
# A
# E

string match '[^fb]*' foo bar baz qux
# Output:
# qux

echo 'ok?' | string match '*\?'
# Output:
# ok?
\endfish

# regex examples

string match -r ...

\fish
string replace ...
\endfish
